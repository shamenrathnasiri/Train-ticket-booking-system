"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "(middleware)/./src/lib/setup-db.js":
/*!*****************************!*\
  !*** ./src/lib/setup-db.js ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _db_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./db.js */ \"(middleware)/./src/lib/db.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n\n\n\nasync function initializeDatabase() {\n    console.log('🔍 Checking database setup...');\n    try {\n        // First, connect without specifying a database to check if it exists\n        const mysql = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! mysql2/promise */ \"(middleware)/./node_modules/mysql2/promise.js\", 19));\n        const connection = await mysql.default.createConnection({\n            host: process.env.DB_HOST || 'localhost',\n            user: process.env.DB_USER || 'root',\n            password: process.env.DB_PASSWORD || ''\n        });\n        // Check if database exists\n        const [databases] = await connection.query(\"SHOW DATABASES LIKE 'train_ticket_booking'\");\n        if (databases.length === 0) {\n            console.log('📦 Database not found. Creating database...');\n            await connection.query('CREATE DATABASE train_ticket_booking');\n            console.log(' Database created successfully!');\n        } else {\n            console.log(' Database already exists.');\n        }\n        // Switch to the database\n        await connection.query('USE train_ticket_booking');\n        // Check if tables exist\n        const [tables] = await connection.query('SHOW TABLES');\n        console.log(`Found ${tables.length} existing tables.`);\n        if (tables.length === 0) {\n            console.log('📋 Tables not found. Creating tables...');\n            // Read and execute the SQL file\n            const sqlFilePath = path__WEBPACK_IMPORTED_MODULE_2__.join(process.cwd(), 'scripts', 'init-db.sql');\n            let sqlContent = fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync(sqlFilePath, 'utf8');\n            // Remove comments\n            sqlContent = sqlContent.split('\\n').filter((line)=>!line.trim().startsWith('--')).join('\\n');\n            // Split by semicolon and filter empty statements\n            const statements = sqlContent.split(';').map((s)=>s.trim()).filter((s)=>s.length > 0);\n            console.log(`   Executing ${statements.length} SQL statements...`);\n            let executedCount = 0;\n            for (const statement of statements){\n                // Skip CREATE DATABASE and USE statements as we already handled them\n                if (statement.toUpperCase().includes('CREATE DATABASE IF NOT EXISTS')) {\n                    console.log('   Skipping CREATE DATABASE statement');\n                    continue;\n                }\n                if (statement.toUpperCase().startsWith('USE ')) {\n                    console.log('   Skipping USE statement');\n                    continue;\n                }\n                try {\n                    await connection.query(statement);\n                    executedCount++;\n                    if (statement.toUpperCase().includes('CREATE TABLE')) {\n                        const tableName = statement.match(/CREATE TABLE.*?`?(\\w+)`?\\s*\\(/i)?.[1];\n                        console.log(`   ✓ Created table: ${tableName || 'unknown'}`);\n                    } else if (statement.toUpperCase().includes('INSERT INTO')) {\n                        const tableName = statement.match(/INSERT INTO.*?`?(\\w+)`?/i)?.[1];\n                        console.log(`   ✓ Inserted data into: ${tableName || 'unknown'}`);\n                    }\n                } catch (err) {\n                    // Ignore duplicate key errors for sample data and table exists errors\n                    if (!err.message.includes('Duplicate entry') && !err.message.includes('already exists')) {\n                        console.error(`   ✗ Error: ${err.message}`);\n                        console.error(`   Statement preview: ${statement.substring(0, 100)}...`);\n                    } else if (err.message.includes('Duplicate entry')) {\n                        console.log(`   ℹ Skipped duplicate data`);\n                    }\n                }\n            }\n            console.log(`   Executed ${executedCount} statements successfully.`);\n            console.log('✅ Tables created and sample data inserted!');\n        } else {\n            console.log(`✅ Found ${tables.length} tables in database.`);\n            // List the tables\n            const tableNames = tables.map((t)=>Object.values(t)[0]);\n            console.log('   Tables:', tableNames.join(', '));\n            // Check if we have all required tables\n            const requiredTables = [\n                'users',\n                'bookings'\n            ];\n            const missingTables = requiredTables.filter((t)=>!tableNames.includes(t));\n            if (missingTables.length > 0) {\n                console.log('⚠️  Missing tables:', missingTables.join(', '));\n                console.log('   Creating missing tables...');\n                // Read and execute the SQL file to create missing tables\n                const sqlFilePath = path__WEBPACK_IMPORTED_MODULE_2__.join(process.cwd(), 'scripts', 'init-db.sql');\n                let sqlContent = fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync(sqlFilePath, 'utf8');\n                // Remove comments\n                sqlContent = sqlContent.split('\\n').filter((line)=>!line.trim().startsWith('--')).join('\\n');\n                const statements = sqlContent.split(';').map((s)=>s.trim()).filter((s)=>s.length > 0);\n                for (const statement of statements){\n                    if (statement.toUpperCase().includes('CREATE DATABASE') || statement.toUpperCase().startsWith('USE ')) {\n                        continue;\n                    }\n                    try {\n                        await connection.query(statement);\n                    } catch (err) {\n                        if (!err.message.includes('Duplicate entry') && !err.message.includes('already exists')) {\n                            console.warn('Warning:', err.message);\n                        }\n                    }\n                }\n                console.log('✅ Missing tables created!');\n            }\n        }\n        // Test connection using the same connection (not the pool)\n        console.log('🔌 Testing database connection...');\n        const [result] = await connection.query('SELECT COUNT(*) as count FROM trains');\n        console.log(`✅ Connection successful! Found ${result[0].count} trains in database.`);\n        // Now close the connection\n        await connection.end();\n        console.log('\\n🎉 Database setup complete!\\n');\n        return true;\n    } catch (error) {\n        console.error('❌ Database setup failed:', error.message);\n        console.error('\\nError details:', error);\n        console.error('\\nPlease check:');\n        console.error('1. MySQL server is running');\n        console.error('2. Credentials in .env.local are correct');\n        console.error('3. User has permission to create databases');\n        return false;\n    }\n}\n// Run if called directly\nif (\"file:///E:/My%20project/Train-ticket-booking-system/train-ticket-booking/src/lib/setup-db.js\" === `file://${process.argv[1]}`) {\n    initializeDatabase().then((success)=>process.exit(success ? 0 : 1)).catch((err)=>{\n        console.error(err);\n        process.exit(1);\n    });\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (initializeDatabase);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./src/lib/setup-db.js\n");

/***/ })

});